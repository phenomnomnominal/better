import type {
  BettererOptionsReporters,
  BettererReporter,
  BettererReporterFactory,
  BettererReporterModule
} from './types.js';

import { BettererError } from '@betterer/errors';
import path from 'node:path';

import { importDefault } from '../fs/index.js';
import { BettererRunLoggerÎ© } from '../run/index.js';
import { isFunction, isString } from '../utils.js';
import { BettererReporterÎ© } from './reporter.js';

const REPORTER_HOOK_NAMES = Object.getOwnPropertyNames(BettererReporterÎ©.prototype) as ReadonlyArray<
  keyof BettererReporter
>;
const RUN_LOGGER_HOOK_NAMES = Object.getOwnPropertyNames(BettererRunLoggerÎ©.prototype) as ReadonlyArray<
  keyof BettererRunLoggerÎ©
>;

export async function loadDefaultReporter(): Promise<BettererReporterÎ©> {
  const reporterFactory = await importDefault('@betterer/reporter');
  assertDefaultReporter(reporterFactory);
  return new BettererReporterÎ©([reporterFactory.createReporterÎ”()]);
}

function assertDefaultReporter(reporterFactory: unknown): asserts reporterFactory is BettererReporterFactory {
  if (!(reporterFactory as Partial<BettererReporterFactory>).createReporterÎ”) {
    throw new BettererError(`"@betterer/reporter" didn't provider a reporter factory. ðŸ˜”`);
  }
}

export async function loadReporters(reporters: BettererOptionsReporters, cwd: string): Promise<BettererReporterÎ©> {
  if (reporters.length === 0) {
    return await loadDefaultReporter();
  }

  return new BettererReporterÎ©(
    await Promise.all(
      reporters.map(async (reporter) => {
        if (isString(reporter)) {
          reporter = await resolveReporter(cwd, reporter);
          try {
            const module = await importDefault(reporter);
            assertReporter(reporter, module);
            validate(module.reporter, REPORTER_HOOK_NAMES);
            return module.reporter;
          } catch (error) {
            throw new BettererError(`could not import "${reporter}". ðŸ˜”`, error as BettererError);
          }
        }
        validate(reporter, REPORTER_HOOK_NAMES);
        return reporter;
      })
    )
  );
}

function assertReporter(reporter: string, reporterModule: unknown): asserts reporterModule is BettererReporterModule {
  if (!reporterModule || !(reporterModule as Partial<BettererReporterModule>).reporter) {
    throw new BettererError(`"${reporter}" didn't create a reporter. ðŸ˜”`);
  }
}

export function loadSilentReporter(): BettererReporterÎ© {
  return new BettererReporterÎ©([]);
}

function validate(result: unknown, hookNames: ReadonlyArray<string>): asserts result is BettererReporter {
  const reporter = result as BettererReporter;
  Object.keys(reporter).forEach((key) => {
    const hookName = key as keyof BettererReporter;
    if (key === 'runLogger') {
      validate(reporter.runLogger, RUN_LOGGER_HOOK_NAMES);
      return;
    }
    if (!hookNames.includes(hookName)) {
      throw new BettererError(`"${hookName}" is not a valid reporter hook name. ðŸ˜”`);
    }
    if (!isFunction(reporter[hookName])) {
      throw new BettererError(`"${hookName}" is not a function. ðŸ˜”`);
    }
  });
}

async function resolveReporter(cwd: string, reporter: string): Promise<string> {
  try {
    // Local reporter:
    const localReporterPath = path.resolve(cwd, reporter);
    await import(localReporterPath);
    return localReporterPath;
  } catch {
    // npm module:
    return reporter;
  }
}
